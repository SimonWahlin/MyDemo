version: 1.0.{build}

os: "WMF 5"
init:
    - ps: |
        'Init phase'

install: 
    - cinst -y pester
#    - git clone https://github.com/PowerShell/DscResource.Tests

build_script:
    - ps: |
        'Build script'
        $PSVersionTable
        '#'*50
        ''
        'APPVEYOR_REPO_TAG'
        $Env:APPVEYOR_REPO_TAG
        '#'*50
        ''
        'APPVEYOR_REPO_TAG_NAME'
        $Env:APPVEYOR_REPO_TAG_NAME
        '#'*50
        ''
        if($Env:APPVEYOR_REPO_TAG -eq 'true')
        {
            "THIS IS A TAG!"            
        }
        else{
            "NOT A TAG!"
        }
            
test_script:
    - ps: |
        $testResultsFile = ".\TestsResults.xml"
        $result = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
        
        # Upload Testresults to AppVeyor Build
        #(New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
        
        if ($result.FailedCount -gt 0) { 
            throw "$($res.FailedCount) tests failed."
        }

on_finish:
    - ps: |
        $Env:PWD = $PWD.Path
        
artifacts:
    - path: $(PWD)

deploy_script:
    - ps: |
        if($Env:APPVEYOR_REPO_TAG -eq 'true')
        {
            "THIS IS A TAG!"
            Function Get-SWModuleManifestData
            {
                param
                (
                    [Microsoft.PowerShell.DesiredStateConfiguration.ArgumentToConfigurationDataTransformation()]
                    [hashtable]
                    $Path
                )
        
                'LicenseUri','Tags','ProjectUri','IconUri','ReleaseNotes' | Foreach {
                    if($Path['PrivateData']['PSData'][$_])
                    {
                        $Path[$_] = $Path['PrivateData']['PSData'][$_]
                    }
                }
                $Path['PrivateData'].Remove('PSData')
        
                Write-Output -InputObject $Path
            }
        
            $ManifestData = Get-SWModuleManifestData 'D:\git\InternetSettings\InternetSettings.psd1'
            $ManifestData['ModuleVersion'] = $Env:APPVEYOR_BUILD_VERSION
            $ManifestData['ReleaseNotes'] = @'
            [{0}]
            {1}
        
            {2}
        '@ -f $Env:APPVEYOR_BUILD_VERSION, 
                (
                    $Env:APPVEYOR_REPO_COMMIT_MESSAGE,
                    $Env:APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED -join "`n"
                ),
                $ManifestData['ReleaseNotes']
        
            New-ModuleManifest @ManifestData -Path '.\InternetSettings.psd1'
        
            if(Get-Command -Name Get-PackageProvider -ErrorAction SilentlyContinue)
            {
        
                Get-PackageProvider -Name NuGet -ForceBootstrap
                #Publish-Module -Name $Env:-NuGetApiKey $Env:PSGKey
            }
            else
            {
                'PSGallery not supported'
            }            
        }
        else{
            "Commit is not a tag, skipping deploy!"
        }
      
        
        